{"version":3,"sources":["components/posts/subway_map.jpeg","components/posts/graph_visual.png","components/posts/utm_map.png","components/home.js","components/posts/0.js","components/main.js","components/about.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","TopBar","BlogTitle","Author","Note","React","Component","Fade","keyframes","styled","div","p","h1","Post","EntryTitle","Image","src","require","Caption","Subtitle","MainText","SmallImg","img","Date","entries","key","StyledDivider","Main","Stopper","hr","Holder","Title","About","props","handleResize","setState","w","window","innerWidth","h","innerHeight","state","bind","addEventListener","this","removeEventListener","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e54a09b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/subway_map.6716dc71.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/graph_visual.b8b59136.png\";","module.exports = __webpack_public_path__ + \"static/media/utm_map.ac5db505.png\";","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <TopBar>\n        <BlogTitle>\n          Moment's Notice\n        </BlogTitle>\n        <Author>\n          By Francis Park and Sean Rhee\n        </Author>\n        <Note>\n          Home ={'>'} Blog ={'>'} About\n        </Note>\n        <Note>\n          (scroll right)\n        </Note>\n      </TopBar>\n    );\n  }\n}\n\nexport default App;\n\nconst Fade = keyframes`\n  0% { color: #f2f2f200; }\n  40% { color: #f2f2f200; }\n  100% { color: #f2f2f255; }\n`;\n\nconst TopBar = styled.div`\n  display: flex;\n  height: 100%;\n  min-width: 100%;\n  background: linear-gradient(114deg, rgba(39,39,181,1) 0%, rgba(64,34,103,1) 39%, rgba(135,55,149,1) 74%, rgba(52,102,156,1) 100%);\n  color: #f2f2f2;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n`;\n\nconst Note = styled.p`\n  font-size: 12px;\n  color: #f2f2f255;\n  animation: ${Fade} 2s linear 1;\n  margin-top: -10px;\n`;\n\nconst BlogTitle = styled.h1`\n  color: #f2f2f2;\n  font-size: 34px;\n  font-weight: 300;\n  letter-spacing: 4px;\n`;\n\nconst Author = styled.h1`\n  margin-top: -14px;\n  color: #f2f2f2aa;\n  font-size: 14px;\n  font-weight: 200;\n  margin-bottom: 26px;\n`;\n\n/*\nconst Menu = styled.div`\n  width: 100vw;\n  height: 40px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NavItem = styled.a`\n  padding-top: 9px;\n  flex: 1;\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n  text-align: center;\n  vertical-align: center;\n  text-decoration: none;\n`;\n\nconst Filler = styled.div`\n  flex: 4;\n`;\n\nconst Everything = styled.div`\n  width: 80vw;\n  padding-left: 10%;\n`;\n*/\n","import React from 'react';\nimport styled from 'styled-components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Post>\n        <EntryTitle>\n          Making the Seoul Metro (or any metro) Better || Part 1\n        </EntryTitle>\n        <Date>\n          Written by Sean Rhee || January 14, 2020\n        </Date>\n        <Image src={require('./subway_map.jpeg')}/>\n        <Caption>\n          Photo: Seoul Metropolitan Subway Map (Credit: Seoul Metro)\n        </Caption>\n        <Subtitle>\n          Introduction\n        </Subtitle>\n        <MainText>\n          The Seoul metro is considered one of the best in the world. Despite this, it still has various inefficiencies. For me, this is best exemplified by the fact that I can jog home from school faster than if I took subway. Maybe I'm just unlucky, but as great as Seoul's metro is, I can't help but feel like it could be better. But how exactly could one go about improving the metro's efficiency?\n        </MainText>\n        <MainText>\n          First and foremost, there is no concrete definition of what makes a system like a subway efficient. For example, if we represent our subway graphically by creating a vertex for each station, both a complete graph and minimum spanning tree could be argued to be an optimally efficient layout. This is because there are various aspects of a transport network that can determine efficiency with some of these factors being at odds with one another. With that in mind, let's continue.\n        </MainText>\n        <MainText>\n          As far as our definition of efficiency is concerned, there are three primary factors of importance: distance, commuter time, and service potential (which I'll explain).\n        </MainText>\n        <MainText>\n          Distance is obviously important because it wouldn't be feasible to build and maintain lines to and from every station in a system (unless there are like, four stations in total). Thinking back, a distance-optimized topology would resemble a minimum spanning tree.\n        </MainText>\n        <MainText>\n          Commuter time is also obviously important since the reason we use transport in the first place is to get to and from places quickly. Again, thinking back, a commuter timeâ€“optimized topology would resemble a complete graph.\n        </MainText>\n        <MainText>\n          Unfortunately, as alluded to earlier, the two metrics of distance and commuter time are essentially in opposition: one can only be improved at the expense of the other. So how can these be balanced? Service potential (as subjectively defined by the user/designer).\n        </MainText>\n        <MainText>\n          Service potential is, in essence, the \"importance\" of a station. Although this can be determined many ways, the way that we'll be determining this is by creating a list of the average traffic values of every station and normalizing them across some range. The higher the service potential, the more time-optimized that station will be. The lower the service potential, the more distance-optimized that station will be.\n        </MainText>\n        <MainText>\n          Assigning a metro system an efficiency ultimately comes down to relating these three values of distance, commuter time, and service potential in a reasonable, quantifiable way. Using this newly derived efficiency value, we can then train a machine learning algorithm to output metro layouts and grade their fitness. Ultimately, this should result in us receiving a theoretically better map for the Seoul metro. I say theoretically because while improving Seoul's subway is a long-term goal, for the purposes of this post, I'll be focusing more on the methodology and verification of its validity.\n        </MainText>\n        <Subtitle>\n          Method and Reasoning\n        </Subtitle>\n        <MainText>\n          Since a neural network will be the one generating our subway maps, it doesn't matter if we use efficiency or inefficiency when defining fitness for training (maximizing efficiency and minimizing inefficiency should technically be identical). Because of this, we're going to be using an inefficiency metric that our machine learning algorithm will try to minimize for (since it's more intuitive to implement).\n        </MainText>\n        <MainText>\n          To abstractly represent our subway systems, we will be using graphs. Essentially, each graph will be composed of multiple \"chains\". Each chain will represent an individual subway line. Each vertex in each chain will represent a certain station. The edge connecting any two vertices in a chain  will be weighted according to the real-life euclidean distance between the two stations the vertices represent plus some intermediate node penalty (INP). If the same station is in two or more chains, it will be connected to each of its counterparts via a transfer edge. These transfer edges will be weighted according to some necessary transfer penalty (NTP). INPs and NTPs are assigned in order to incentivize the use of shorter or more time-optimized routes that avoid unnecessary stops and transfers.\n        </MainText>\n        <SmallImg src={require('./graph_visual.png')}/>\n        <Caption>\n          A Basic Visualization of How this Graphical Representation Works\n        </Caption>\n        <MainText>\n          Using this graphical representation of a subway system, we can finally obtain our inefficiency metric by iterating through each vertex, weighting the INP and NTP by our vertex's service potential, summing the minimum distances from each node to every other node using an SPF algorithm (such as Dijkstra's algorithm or the Floyd Warshall algorithm), re-weighting each sum based on the start node's service potential, and averaging these weighted sums.\n        </MainText>\n        <MainText>\n          Initially, this entire methodology may seem somewhat contrived, but with some thought, it should actually make a lot of intuitive sense. First, by using a station's traffic as its service potential, we can ensure that \"more important\" stations are more commuter timeâ€“optimized and are more prioritized while the \"less important\" stations are more distance-optimized and are less prioritized. This is because by weighting INPs and NTPs by service potential, a high service potential would result in the incentivization of visiting fewer stops and making fewer transfers. Additionally, by weighting our sum by service potential, minimizing our weighted sum for \"more important\" stations will matter more (which makes sense). The opposite applies for stations with low service potential. Also, the reason our abstracted chain representation even works to begin with is because a) if you imagine that our INPs and NTPs in the figure above were of length 0, our chain model would resemble its real-life counterpart and b) if you think about it, the reason it's annoying to have lots of stops or transfers is because in that time, you could otherwise be travelling toward your destination meaning that having a stop or transfer is like having to travel extra distance which is why it makes sense to utilize INPs and NTPs at all. Finally, the reason we average our weighted sum at the end instead of something analogous such as summing our sums is because even though this would have a virtually identical result for our algorithm, by averaging our sums, it could give us a more normalized value across different subway systems (not just Seoul's).\n        </MainText>\n        <MainText>\n          One major problem is it's difficult to analyze the actual importance of certain routes. For example, even though some station, A, and another station, B, might both draw heavy traffic, this doesn't necessitate heavy traffic between A and B. A and B could be two hubs, so to speak, each with their own relatively contained subsystems. Unfortunately, since it's difficult to find data about the importance of actual routes themselves (unless we were to track people individually as they move around in a subway), the next best thing, if you ask me, is to just use station importance based on general traffic.\n        </MainText>\n        <MainText>\n          To summarize, the metric we're using is far from perfect, but its hard to make a perfect metric (and get data required for a perfect metric). Regardless, the method that has been devised to evaluate inefficiency should still be relatively effective as it can account for both distance and commuter time while providing a reasonable way to determine which to give more importance to.\n        </MainText>\n        <Subtitle>\n          Testing\n        </Subtitle>\n        <MainText>\n          To test, I essentially created a random map containing 10 \"stations.\" Each station was then turned into a vertex for a graph of the system. This was a dynamic graph on which a feed-forward NEAT network added edges that it also assigned to a certain line. I limited it's choice in lines to 5 options. This was honestly an arbitrary number; however, based on intuition, I don't think that 6+ lines would add any extra value to a system that only has 10 nodes (the Seoul Metro, with 434 stations, has 9 lines).\n        </MainText>\n        <Subtitle>\n          Data Collection (so far)\n        </Subtitle>\n        <MainText>\n          TL;DR: This is kinda a supplementary addition to this post regarding progress so far in applying this method to the Seoul Metro itself. Data collection regarding the Seoul Metro hasn't been completed yet. Furthermore, a more efficient architecture has to be devised for the neural net due to computational and hardware limitations.\n        </MainText>\n        <MainText>\n          To create a proper layout for a new Seoul subway system, we first need to find the actual locations of each station. It's entirely true that for a fully optimized system, it's also important to consider changing station locations; however, for our purposes, we'll just assume that it's only the paths that will be needing changing.\n        </MainText>\n        <MainText>\n          First, we defined the scope of what constituted the \"Seoul subway system.\" Although it was a somewhat arbitrary decision, we limited what we considered \"Seoul's subway\" to just lines 1~9.\n        </MainText>\n        <MainText>\n          Following this, drawing from a list of each station in each line on Wikipedia, the latitude and longitude was found for each station with the help of Google Maps. This was compiled into aÂ .csv file which we then converted into {'<'}x, y{'>'} coordinates via the Universal Transverse Mercator coordinate system. All of South Korea is within one UTM zone, so I hope that distortion is minimal (although there will, of course, be distortion). Either way, each station's new coordinates were compiled into a list and normalized within the range [0, 1].\n        </MainText>\n        <SmallImg src={require('./utm_map.png')}/>\n        <Caption>\n          Using the coordinates we obtained, this is what we ended up with.\n        </Caption>\n        <MainText>\n          The other information that is necessary to create an efficient layout is to know each station's individual \"importance.\" We were able to find an official spreadsheet with the average throughput of each stations per hour throughout the year; however, we haven't scraped the data yet, but that's okay, because for now, we aren't going to be actually working with the Seoul Metro (maybe that'll be in a part 2 or 3).\n        </MainText>\n      </Post>\n    );\n  }\n}\n\nexport default App;\n\nconst Post = styled.div`\n  width: 100%;\n  display: inline-block;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst SmallImg = styled.img`\n  width: 80%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Date = styled.h1`\n  color: #00000088;\n  font-size: 12px;\n  font-weight: 300;\n  margin-top: -12px;\n  margin-bottom: 26px;\n`;\n\nconst EntryTitle = styled.h1`\n  color: black;\n  font-size: 38px;\n  font-weight: 400;\n`;\n\nconst Subtitle = styled.h1`\n  color: black;\n  font-size: 30px;\n  font-weight: 500;\n  margin-left: 10%;\n  margin-right: 10%;\n  margin-top: 30px;\n`;\n\nconst Caption = styled.p`\n  color: #000000b5;\n  font-size: 12px;\n  font-weight: 200;\n  margin-top: 5px;\n  text-align: center;\n`;\n\nconst MainText = styled.h1`\n  color: #000000b5;\n  font-size: 20px;\n  font-weight: 400;\n  line-height: 26px;\n  margin-left: 10%;\n  margin-right: 10%;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Post0 from './posts/0';\n\nclass App extends React.Component {\n  render() {\n    var entries = [\n      // <Post0 />,\n      // <StyledDivider />,\n      <Post0 key={0}/>,\n      <StyledDivider />,\n      <Post0 key={0}/>\n    ]\n\n    return (\n      <Main>\n        <Stopper />\n        {entries}\n        <Stopper />\n      </Main>\n    );\n  }\n}\n\nexport default App;\n\nconst Main = styled.div`\n  min-width: 80%;\n  padding-left: 10%;\n  padding-right: 10%;\n  overflow-y: scroll;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n  scrollbar-width: none;\n  background-color: #fafafa;\n`;\n\nconst Stopper = styled.div`\n  height: 30px;\n`;\n\nconst StyledDivider = styled.hr`\n  border-top: 1px dashed #a5a7b0;\n  border-bottom: 0px\n  margin-top: 32px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Holder>\n        <Stopper />\n        <Title>\n          About This Blog\n        </Title>\n        <Subtitle>\n          Authors\n        </Subtitle>\n        <About>\n          Moment's Notice has two authors: Sean Rhee and Francis Park.\n          <br /><br />\n          Sean is a senior at the Yongsan International School of Seoul (YISS). He has an interest in a wide range of subjects from computer science, to physics, to international relations, to engineering, to music theory/composition. He likes running and is on both cross country and track and field at YISS.\n          <br /><br />\n          Francis is also a senior at YISS. He is an avid Jazz & Hip-Hop listener. He enjoys playing (right-bench or the occasional start) for his school's varsity boys soccer team. Francis' interests include mathematics (number theory, discrete mathematics, time series), atmospheric sciences, unsupervised learning, and writing short stories. His friends refer to him as 'chunky'.\n        </About>\n        <br />\n        <Subtitle>\n          \"Moment's Notice\"\n        </Subtitle>\n        <About>\n          This blog's title was inspired by John Coltrane's <i>Moment's Notice</i>. As it suggests, the title for this blog was thought of on a moment's notice. Similarly, we plan on posting whenever we feel is suitable on topics that capture our curiosity. This is a relatively STEM-oriented blog, but its contents won't necessarily be limited to STEM.\n        </About>\n        <br />\n        <Subtitle>\n          Purpose\n        </Subtitle>\n        <About>\n          While the purpose of this blog is to act as a forum for sharing ideas (and getting feedback regarding these ideas), it's also just for fun. We hope other people find the concepts and areas we explore to be interesting and worth delving further into.\n        </About>\n        <br />\n        <Subtitle>\n          Contact\n        </Subtitle>\n        <About>\n          email: momentsnoticecontact@gmail.com\n          <br /><br />\n          **We'll try to respond to everything, but unless this blog by some miracle takes off, chances are we won't be checking this inbox super often.\n        </About>\n        <Stopper />\n      </Holder>\n    );\n  }\n}\n\nexport default App;\n\nconst Holder = styled.div`\n  min-width: 80%;\n  padding-left: 10%;\n  padding-right: 10%;\n  overflow-y: scroll;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n  scrollbar-width: none;\n  background: linear-gradient(90deg, #a5a7b0 0%, #fafafa 0.1%, #fafafa 100%);;\n`;\n\nconst Stopper = styled.div`\n  height: 30px;\n`;\n\nconst Title = styled.h1`\n  color: black;\n  font-size: 38px;\n  font-weight: 400;\n`;\n\nconst Subtitle = styled.h1`\n  color: black;\n  font-size: 26px;\n  font-weight: 500;\n`;\n\nconst About = styled.h1`\n  color: #000000b5;\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 26px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Home from './components/home';\nimport Main from './components/main';\nimport About from './components/about';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      w: window.innerWidth,\n      h: window.innerHeight,\n    }\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleResize = () => {\n    this.setState({ w: window.innerWidth });\n    this.setState({ h: window.innerHeight });\n  }\n\n  render() {\n    return (\n      <Container w={this.state.w} h={this.state.h}>\n        <Home h={this.state.h}/>\n        <Main />\n        <About />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: ${props => props.w};\n  height: ${props => props.h}px;\n  overflow-x: scroll;\n  overflow-y: auto;\n  scroll-snap-type: x mandatory;\n  scrollbar-width: none;\n  ::-webkit-scrollbar {\n    display: none!important;\n    height: 0;\n    width: 0;\n    background-color: transparent;\n   }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}