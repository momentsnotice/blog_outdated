{"version":3,"sources":["components/home.js","components/posts/0.js","components/main.js","components/about.js","App.js","serviceWorker.js","index.js"],"names":["App","TopBar","BlogTitle","Author","Note","React","Component","Fade","keyframes","styled","div","p","h1","Post","EntryTitle","Subtitle","MainText","Date","entries","key","Main","Stopper","hr","Holder","Title","About","props","handleResize","setState","w","window","innerWidth","h","innerHeight","state","bind","addEventListener","this","removeEventListener","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uzCAwBeA,E,iLAnBX,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,wBAGA,kBAACC,EAAD,sCAGA,kBAACC,EAAD,cACS,IADT,UACqB,IADrB,UAGA,kBAACA,EAAD,4B,GAbUC,IAAMC,WAuBlBC,EAAOC,YAAH,KAMJP,EAASQ,IAAOC,IAAV,KAaNN,EAAOK,IAAOE,EAAV,IAGKJ,GAITL,EAAYO,IAAOG,GAAV,KAOTT,EAASM,IAAOG,GAAV,K,qsBCvBGZ,E,iLA/BX,OACE,kBAACa,EAAD,KACE,kBAACC,EAAD,0CAGA,kBAAC,EAAD,mCAGA,kBAACC,EAAD,qBAGA,kBAACC,EAAD,4eAGA,kBAACD,EAAD,0BAGA,kBAACC,EAAD,0ZAEE,6BAAM,6BAFR,2UAIE,6BAAM,6BAJR,wZAME,6BAAM,6BANR,wf,GAnBUX,IAAMC,WAmClBO,EAAOJ,IAAOC,IAAV,KAKJO,EAAOR,IAAOG,GAAV,KAQJE,EAAaL,IAAOG,GAAV,KAMVG,EAAWN,IAAOG,GAAV,KAMRI,EAAWP,IAAOG,GAAV,K,igBCzCCZ,E,iLAhBX,IAAIkB,EAAU,CAGZ,kBAAC,EAAD,CAAOC,IAAK,KAGd,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,MACCH,EACD,kBAACG,EAAD,W,GAZUhB,IAAMC,WAoBlBc,EAAOX,IAAOC,IAAV,KAWJW,EAAUZ,IAAOC,IAAV,KAISD,IAAOa,GAAV,K,+1BCWJtB,E,iLA7CX,OACE,kBAACuB,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,wBAGA,kBAAC,EAAD,gBAGA,kBAACC,EAAD,oEAEE,6BAAM,6BAFR,8SAIE,6BAAM,6BAJR,wXAOA,6BACA,kBAAC,EAAD,2BAGA,kBAACA,EAAD,0DACoD,8CADpD,mRAGA,6BACA,kBAAC,EAAD,gBAGA,kBAACA,EAAD,kQAGA,6BACA,kBAAC,EAAD,gBAGA,kBAACA,EAAD,6CAEE,6BAAM,6BAFR,kJAKA,kBAAC,EAAD,W,GAzCUpB,IAAMC,WAiDlBiB,EAASd,IAAOC,IAAV,KAWNW,EAAUZ,IAAOC,IAAV,KAIPc,EAAQf,IAAOG,GAAV,KAMLG,EAAWN,IAAOG,GAAV,KAMRa,EAAQhB,IAAOG,GAAV,K,kYCtCIZ,G,YAjCb,WAAY0B,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,aAAe,WACb,EAAKC,SAAS,CAAEC,EAAGC,OAAOC,aAC1B,EAAKH,SAAS,CAAEI,EAAGF,OAAOG,eAjB1B,EAAKC,MAAQ,CACXL,EAAGC,OAAOC,WACVC,EAAGF,OAAOG,aAEZ,EAAKN,aAAe,EAAKA,aAAaQ,KAAlB,gBANH,E,iFAUjBL,OAAOM,iBAAiB,SAAUC,KAAKV,gB,6CAIvCG,OAAOQ,oBAAoB,SAAUD,KAAKV,gB,+BAS1C,OACE,kBAACY,GAAD,CAAWV,EAAGQ,KAAKH,MAAML,EAAGG,EAAGK,KAAKH,MAAMF,GACxC,kBAAC,EAAD,CAAMA,EAAGK,KAAKH,MAAMF,IACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GA5BU3B,IAAMC,WAoClBiC,GAAY9B,IAAOC,IAAV,MAGJ,SAAAgB,GAAK,OAAIA,EAAMG,KACd,SAAAH,GAAK,OAAIA,EAAMM,KCnCPQ,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c3e614a.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <TopBar>\n        <BlogTitle>\n          Moment's Notice\n        </BlogTitle>\n        <Author>\n          By Francis Park and Sean Rhee\n        </Author>\n        <Note>\n          Home ={'>'} Blog ={'>'} About\n        </Note>\n        <Note>\n          (scroll right)\n        </Note>\n      </TopBar>\n    );\n  }\n}\n\nexport default App;\n\nconst Fade = keyframes`\n  0% { color: #f2f2f200; }\n  40% { color: #f2f2f200; }\n  100% { color: #f2f2f255; }\n`;\n\nconst TopBar = styled.div`\n  display: flex;\n  height: 100%;\n  min-width: 100%;\n  background: linear-gradient(114deg, rgba(39,39,181,1) 0%, rgba(64,34,103,1) 39%, rgba(135,55,149,1) 74%, rgba(52,102,156,1) 100%);\n  color: #f2f2f2;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n`;\n\nconst Note = styled.p`\n  font-size: 12px;\n  color: #f2f2f255;\n  animation: ${Fade} 2s linear 1;\n  margin-top: -10px;\n`;\n\nconst BlogTitle = styled.h1`\n  color: #f2f2f2;\n  font-size: 34px;\n  font-weight: 300;\n  letter-spacing: 4px;\n`;\n\nconst Author = styled.h1`\n  margin-top: -14px;\n  color: #f2f2f2aa;\n  font-size: 14px;\n  font-weight: 200;\n  margin-bottom: 26px;\n`;\n\n/*\nconst Menu = styled.div`\n  width: 100vw;\n  height: 40px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NavItem = styled.a`\n  padding-top: 9px;\n  flex: 1;\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n  text-align: center;\n  vertical-align: center;\n  text-decoration: none;\n`;\n\nconst Filler = styled.div`\n  flex: 4;\n`;\n\nconst Everything = styled.div`\n  width: 80vw;\n  padding-left: 10%;\n`;\n*/\n","import React from 'react';\nimport styled from 'styled-components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Post>\n        <EntryTitle>\n          Seoul Metro System (Test Excerpt)\n        </EntryTitle>\n        <Date>\n          Published January 14, 2020\n        </Date>\n        <Subtitle>\n          Introduction\n        </Subtitle>\n        <MainText>\n          Essentially, optimizing Seoul’s subway system is a matter of definition. Through neuroevolution, so long as a proper fitness function is defined, a neural network can learn to output an “efficient” subway system based on an input of the coordinates of each station to include. Since almost all subways are fundamentally similar in their mode of operation, a method defining efficiency for Seoul’s subway system can be applied to virtually any other subway system.\n        </MainText>\n        <Subtitle>\n          Layout Efficiency\n        </Subtitle>\n        <MainText>\n          First, when it comes to layout efficiency, we are assuming fixed station locations (rather than optimizing the efficiency of station location and subway topology, we are only optimizing subway topology based on existing locations). Without loss of generality, we cite three primary factors of concern when it comes to layout efficiency for any given transport system: cost, time, and service potential.\n          <br /><br />\n          Cost is, in essence, distance. Distance matters since a technically ideal network (taking into account only cost) would be the generalized form of (a variant of) the euclidean Steiner tree problem. Therefore, making the most cost-effective system would require minimizing the total euclidean distance of the system’s lines.\n          <br /><br />\n          Time holds importance since a primary purpose of transport is to travel between locations, and to do so quickly. In order to improve time-efficiency, the goal would be to have as direct a path as possible between any two stations. This would mean minimizing distance, number of stations, and transfers between any two stations (rather than in the system as a whole as was the case with cost-optimization).\n          <br /><br />\n          Service potential is a measurement of the “importance” of any given station. One way of quantifying this is through traffic. Stations that have more traffic than others probably require more attention, and for general efficiency, it is necessary to balance time and distance based on where a station lies on the service potential gradient. Stations with lower service potential require more cost-optimization while stations with higher service potential require more time-optimization.\n        </MainText>\n      </Post>\n    );\n  }\n}\n\nexport default App;\n\nconst Post = styled.div`\n  width: 100%;\n  display: inline-block;\n`;\n\nconst Date = styled.h1`\n  color: #00000088;\n  font-size: 12px;\n  font-weight: 300;\n  margin-top: -12px;\n  margin-bottom: 26px;\n`;\n\nconst EntryTitle = styled.h1`\n  color: black;\n  font-size: 38px;\n  font-weight: 400;\n`;\n\nconst Subtitle = styled.h1`\n  color: black;\n  font-size: 26px;\n  font-weight: 500;\n`;\n\nconst MainText = styled.h1`\n  color: #000000b5;\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 26px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Post0 from './posts/0';\n\nclass App extends React.Component {\n  render() {\n    var entries = [\n      // <Post0 />,\n      // <StyledDivider />,\n      <Post0 key={0}/>\n    ]\n\n    return (\n      <Main>\n        <Stopper />\n        {entries}\n        <Stopper />\n      </Main>\n    );\n  }\n}\n\nexport default App;\n\nconst Main = styled.div`\n  min-width: 80%;\n  padding-left: 10%;\n  padding-right: 10%;\n  overflow-y: scroll;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n  scrollbar-width: none;\n  background-color: #f7f6f2;\n`;\n\nconst Stopper = styled.div`\n  height: 30px;\n`;\n\nconst StyledDivider = styled.hr`\n  border-top: 1px dashed #a5a7b0;\n  border-bottom: 0px\n  margin-top: 32px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Holder>\n        <Stopper />\n        <Title>\n          About This Blog\n        </Title>\n        <Subtitle>\n          Authors\n        </Subtitle>\n        <About>\n          Moment's Notice has two authors: Sean Rhee and Francis Park.\n          <br /><br />\n          Sean is a senior at the Yongsan International School of Seoul (YISS). He has an interest in a wide range of subjects from computer science, to physics, to international relations, to engineering, to music theory/composition. He likes running and is on both cross country and track and field at YISS.\n          <br /><br />\n          Francis is also a senior at YISS. He is an avid Jazz & Hip-Hop listener. He enjoys playing (right-bench or the occasional start) for his school's varsity boys soccer team. Francis' interests include mathematics (number theory, discrete mathematics, time series), atmospheric sciences, unsupervised learning, and writing short stories. His friends refer to him as 'chunky'.\n        </About>\n        <br />\n        <Subtitle>\n          \"Moment's Notice\"\n        </Subtitle>\n        <About>\n          This blog's title was inspired by John Coltrane's <i>Moment's Notice</i>. As it suggests, the title for this blog was thought of on a moment's notice. Similarly, we plan on posting whenever we feel is suitable on topics that capture our curiosity. This is a relatively STEM-oriented blog, but its contents won't necessarily be limited to STEM.\n        </About>\n        <br />\n        <Subtitle>\n          Purpose\n        </Subtitle>\n        <About>\n          While the purpose of this blog is to act as a forum for sharing ideas (and getting feedback regarding these ideas), it's also just for fun. We hope other people find the concepts and areas we explore to be interesting and worth delving further into.\n        </About>\n        <br />\n        <Subtitle>\n          Contact\n        </Subtitle>\n        <About>\n          email: momentsnoticecontact@gmail.com\n          <br /><br />\n          **We'll try to respond to everything, but unless this blog by some miracle takes off, chances are we won't be checking this inbox super often.\n        </About>\n        <Stopper />\n      </Holder>\n    );\n  }\n}\n\nexport default App;\n\nconst Holder = styled.div`\n  min-width: 80%;\n  padding-left: 10%;\n  padding-right: 10%;\n  overflow-y: scroll;\n  scroll-snap-align: start;\n  scroll-snap-stop: always;\n  scrollbar-width: none;\n  background: linear-gradient(90deg, rgba(165,167,176,1) 0%, rgba(247,246,242,1) 0.1%, rgba(247,246,242,1) 100%);;\n`;\n\nconst Stopper = styled.div`\n  height: 30px;\n`;\n\nconst Title = styled.h1`\n  color: black;\n  font-size: 38px;\n  font-weight: 400;\n`;\n\nconst Subtitle = styled.h1`\n  color: black;\n  font-size: 26px;\n  font-weight: 500;\n`;\n\nconst About = styled.h1`\n  color: #000000b5;\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 26px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Home from './components/home';\nimport Main from './components/main';\nimport About from './components/about';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      w: window.innerWidth,\n      h: window.innerHeight,\n    }\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleResize = () => {\n    this.setState({ w: window.innerWidth });\n    this.setState({ h: window.innerHeight });\n  }\n\n  render() {\n    return (\n      <Container w={this.state.w} h={this.state.h}>\n        <Home h={this.state.h}/>\n        <Main />\n        <About />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: ${props => props.w};\n  height: ${props => props.h}px;\n  overflow-x: scroll;\n  overflow-y: auto;\n  scroll-snap-type: x mandatory;\n  scrollbar-width: none;\n  ::-webkit-scrollbar {\n    display: none!important;\n    height: 0;\n    width: 0;\n    background-color: transparent;\n   }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}